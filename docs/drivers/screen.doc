______________________Oasis_Screen_Driver_Documentation__________________________

To use any of these functions you need to use screen namespace like this: call Screen._print

Dependency of this driver is only this file:
	%include "<Your_path_to_Oasis>/src/drivers/screen.asm"

Here's a list of all functions that can be used by system to communicate with the screen:

1. _printAt:
	Purpose:
		This function prints a string at the specified colomn and row on the screen

	Input:
		- rsi is a pointer to string
		- ah is a style of the characters in a string
		- cl is a row position
		- ch is a colomn position

	Output:
		- al and cx are equal to 0
		- rbx and r8 are equal to offset to the place after the last character of the string on the screen
		- dx equals to screen data register port number
		- rsi and r9 point to the end of the string
		- rdi is modified

2. _getVideomemoryOffset
	Purpose:
		Calculates the offset in video memory of some row-colomn position on a screen.
	
	Input:
		- cl is a row position
		- ch is a col position

	Output:
		- ax equals to the offset of the character from the video memory
		- di equals to maximum colomns on the screen
		- cl equals to the colomn position from the video memory
		- dx equals to 0

3. _getCursor
	Purpose:
		Gets the position of the cursor from the screen and converts
		this position into the offset from the start of the video memory.

	Input:
		- nothing

	Output:
		- ax equals to the offset from video memory
		- dx equals to the screen data register port number

4. _setCursor
	Purpose:
		Sets the cursor to the screen by the offset from the start of the video memory.

	Input:
		- bx is an offset (needs to be even because each text cell on the screen is two bytes in memory)

	Output:
		- al equals to low byte of bx
		- bx equals to offset / 2
		- dx equals to the screen data register port number

5. _print
	Purpose:
		This is the simplified _printAt function that gives a more convinient
		way to call it. With this function you don't have to use cx register
		if you want just print text on the current cursor position.

	Input:
		- rsi as a pointer to string
		- ah is characters style

	Output:
		- al equals to 0
		- rbx and r8 are equal to offset to the place after the last character of the string on the screen
		- rcx and rdi are modified
		- dx equals to screen data register port number
		- rsi and r9 point to the end of the string

6. _clearScreen
	Purpose: 
		This simply clears the screen and sets the cursor position to (0, 0).

	Input:
		- nothing at all

	Output:
		- rax is modified
		- rbx and rcx are equal to 0
		- dx equals to screen data register port number

7. _handleScrolling
	Purpose: 
		If offset is more than 0xfa0 then it puts all strings on the screen backwards by 1

	Input:
		- rbx as an offset
	
	Output:
		- rax is modified
		- rbx remains the same if it is not equal to 0xfa0 else it equals 0xf00
		- rcx equals to 0 if rbx = 0xfa0
		- rsi points to the last string on the screen
		- rdi points to the last string + 1 on the screen

8. _eraseBackwards
	Purpose: 
		It deletes the previous character and sets the cursor to that position

	Input:
		- nothing

	Output:
		If the cursor is on the first character of the screen:
			- rax and rbx are modified
			- rcx equals to 0
			- rdx is a number of screen data port
			- rdi equals to maximum cols * 2

		Else if the cursor is on one of the rest of the characters:
			- rax and rbx are modified
			- rdx is a number of screen data port
			- rdi equals to maximum cols * 2

9. _moveCursorRight
	Purpose:
		This function increments the current cursor position by one.

	Input:
		- nothing

	Output:
		If it was not the last character of the string then:
			- al equals to low byte of bx
			- bx equals to offset / 2
			- dx equals to the screen data register port number
			- di equals to MAX_COLS * 2
 
        Else:
			- ax equals to the cursor offset
			- dx equals to MAX_COLS * 2 - 2
			- di equals to MAX_COLS * 2
			- bx equals to the cursor offset

10. _moveCursorLeft
	Purpose:
		Decrements the current cursor position by one.		
	
	Input:
		- nothing

	Output:
		If it was not the first character of the string then:
			- al equals to low byte of bx
			- bx equals to offset / 2
			- dx equals to the screen data register port number
			- di equals to MAX_COLS * 2
 
        Else:
			- ax equals to the cursor offset
			- dx equals to 0
			- di equals to MAX_COLS * 2
			- bx equals to the cursor offset

11. _moveCursorUp
	Purpose:
		This function puts the cursor up by one

	Input:
		- nothing

	Output:
		If it was not the first string of the screen then:
			- al equals to low byte of bx
			- bx equals to offset / 2
			- dx equals to the screen data register port number
			- di is equal to MAX_COLS * 2

        Else:
			- ax equals to the offset from video memory
			- dx equals to screen data register port number
			- bx is modified
			- di is equal to MAX_COLS * 2

12. _moveCursorDown
	Purpose:
		This function puts the cursor down by one

	Input:
		- nothing

	Output:
		If it was not the last string of the screen then:
			- al equals to low byte of bx
			- bx equals to offset / 2
			- dx equals to the screen data register port number
			- di is equal to MAX_COLS * 2
 
        Else:
			- ax equals to the offset from video memory
			- dx equals to screen data register port number
			- bx is modified
			- di is equal to MAX_COLS * 2